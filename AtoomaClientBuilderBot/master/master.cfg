try:
    import authmaster
except:
    raise Exception('No auth configuration for master')

c = BuildmasterConfig = {}

####### BUILDSLAVES

from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave(authmaster.SLAVE_NAME,
    authmaster.SLAVE_PSW)]

c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []
c['change_source'].append(GitPoller(
        'git@github.com:atooma/atooma-android-client.git',
        workdir='gitpoller-workdir', branch='master',
        pollinterval=100))

####### SCHEDULERS

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter
from buildbot.schedulers import timed

c['schedulers'] = []
c['schedulers'].append(SingleBranchScheduler(
                            name="all",
                            change_filter=filter.ChangeFilter(branch='master'),
                            treeStableTimer=None,
                            builderNames=['nightly', 'weekly']))
c['schedulers'].append(ForceScheduler(
                            name="force",
                            builderNames=['nightly', 'weekly']))


c['schedulers'].append(timed.Nightly(name='sch_nightly',
    branch='master',
    builderNames=['nightly'],
    hour=2,
    minute=55,
    onlyIfChanged=True))

c['schedulers'].append(timed.Nightly(name='sch_weekly',
    branch='master',
    builderNames=['weekly'],
    dayOfWeek=4,
    hour=6,
    minute=55,
    onlyIfChanged=False))

####### BUILDERS

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand
from buildbot.steps import shell
from time import gmtime, strftime
from buildbot.process.properties import WithProperties, Interpolate

git_fetch_step = Git(
    repourl='git@github.com:atooma/atooma-android-client.git',
    mode='incremental',
    submodules=True,
    timeout=12000)

make_step = ShellCommand(command="""
    cd Rule\ Definition/;
    ant;
    cd ..;
    cp ./Rule\ Definition/ruledefinition.jar ./Atooma\ Client/libs;
    export ANDROID_HOME=/Users/astagi/Desktop/Android/sdk;
    cd Atooma\ Client/;
    make clean;
    make signed;""")

update_rev_step = shell.SetProperty(command='git rev-parse HEAD', property='gitlastrev')
update_tag_step = shell.SetProperty(command='git describe --tags | awk -F\'-\' \'{print $1}\'',
    property='gitversion')
def get_release_step(type):
    new_build_path = '../../../builds/Atooma_%(prop:gitversion)s_{}_{}.apk'.format(type, strftime('%Y%m%d', gmtime()))

    return ShellCommand(command=[ 'cp', './Atooma Client/bin/Atooma-release.apk',
                                 Interpolate(new_build_path)])

def get_changelog_step(type):
    changelog_cmd = 'git log %(prop:gitlastrev)s..HEAD > ../../../changes/{}changes.log'.format(type)
    return ShellCommand(command=Interpolate(changelog_cmd))


from buildbot.config import BuilderConfig
c['builders'] = []

### NIGHTLY ###

factory_nightly = BuildFactory()

factory_nightly.addStep(git_fetch_step)
#factory_nightly.addStep(make_step)
factory_nightly.addStep(update_tag_step)
factory_nightly.addStep(get_release_step('nightly'))
factory_nightly.addStep(get_changelog_step('nightly'))
factory_nightly.addStep(update_rev_step)

c['builders'].append(
    BuilderConfig(name="nightly",
      slavenames=[authmaster.SLAVE_NAME],
      factory=factory_nightly))

### WEEKLY ###

factory_weekly = BuildFactory()

factory_weekly.addStep(git_fetch_step)
factory_weekly.addStep(make_step)
factory_weekly.addStep(get_release_step('WEEKLY'))

c['builders'].append(
    BuilderConfig(name="weekly",
      slavenames=[authmaster.SLAVE_NAME],
      factory=factory_weekly))

####### STATUS TARGETS

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("pyflakes","pyflakes")]),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### MAIL NOTIFIER

from buildbot.status.mail import MailNotifier
from buildbot.status.builder import Results

def messageFormatter(mode, name, build, results, master_status):
    result = Results[results]
    text = list()
    text.append("#BUILD: {} {}\n".format(name, build))
    text.append("#STATUS: {}\n".format(result.title()))
    text.append("#CHANGELOG")
    text.append(open('../changes/{}changes.log'.format(name), 'r').read())
    return {
        'body' : "\n".join(text),
        'type' : 'plain'
    }

mn = MailNotifier(fromaddr=authmaster.MAIL_USER,
                  sendToInterestedUsers=False,
                  extraRecipients=["stagi.andrea@gmail.com"],
                  useTls=True, relayhost="smtp.gmail.com", smtpPort=587,
                  smtpUser=authmaster.MAIL_USER,
                  smtpPassword=authmaster.MAIL_PSW,
                  messageFormatter=messageFormatter)

c['status'].append(mn)

####### PROJECT IDENTITY

c['title'] = "AtoomaClient Builder"
c['titleURL'] = "https://atooma.com"

c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

c['db'] = {
    'db_url' : "sqlite:///state.sqlite",
}
